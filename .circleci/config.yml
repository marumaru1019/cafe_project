version: 2.1

orbs:
  heroku: circleci/heroku@1.2.5
  slack: circleci/slack@4.1
  aws-ecr: circleci/aws-ecr@6.15
  aws-ecs: circleci/aws-ecs@2.0.0

jobs:
  test_backend:
    docker:
    # dockerイメージで使っているrubyバージョンと一致させる
      - image: circleci/ruby:2.6.5-stretch-node
        environment:
          RAILS_ENV: test
          DB_USER: root
          DB_HOST: 127.0.0.1
          DB_PASSWORD: ''
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circleci_testdb
          POSTGRES_HOST_AUTH_METHOD: trust # パスワードなし

    working_directory: ~/repo

    steps:
      - checkout

      # restore gem from cache
      - restore_cache:
          keys:
            - gem-cache-v1-{{ checksum "~/repo/Gemfile.lock" }}
            - gem-cache-v1-
          working_directory: ~/repo

      # gem install
      - run:
          command: |
            gem install bundler
            bundle config set path 'vendor/bundle'
            bundle install --jobs=4 --retry=3
          working_directory: ~/repo

      - save_cache:
          key: gem-cache-v1-{{ checksum "~/repo/Gemfile.lock" }}
          paths:
            - ~/repo/backend/vendor/bundle
          working_directory: ~/repo

      # Database setup
      - run:
          command: bundle exec rails db:create
          working_directory: ~/repo
      - run:
          command: bundle exec rails db:migrate
          working_directory: ~/repo
      - run:
          command: bundle exec rails db:seed
          working_directory: ~/repo

      - run:
          name: yarn Install
          command: yarn install

      - run:
          command: bundle exec bin/webpack
          working_directory: ~/repo

      - run:
          name: create directory to store test results
          command: mkdir /tmp/test-results
          working_directory: ~/repo

      # run tests
      - run:
          name: RSpec
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
          working_directory: ~/repo

      - run:
          name: rails format test
          command: bundle exec rubocop
          working_directory: ~/repo

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: /home/circleci/repo/tmp/screenshots

      # slack notify
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - run:
          name: Storing previous commit
          command: |
            git rev-parse HEAD > ./commit.txt
      - heroku/install
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Pushing to heroku registry
          command: |
            heroku container:login
            heroku container:push web -a $HEROKU_APP_NAME
            heroku container:release web -a $HEROKU_APP_NAME
      - run:
          name: db  migration
          command: |
            heroku run rails db:migrate --app ${HEROKU_APP_NAME}

      - run:
          name: db  seed
          command: |
            heroku run rails db:seed --app ${HEROKU_APP_NAME}

      # slack notify
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  version: 2
  test:
    jobs:
      - test_backend:
          filters:
            branches:
              ignore:
                - master
                - staging

  deploy_heroku:
    jobs:
      - test_backend:
          filters:
              branches:
                  only:
                  - staging
      - deploy:
          # masterブランチへのpushでのみ反応
          requires:
            - test_backend

  nginx-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          #AWS_ECR_ACCOUNT_URL => ${アカウントID}.dkr.ecr.${リージョン}.amazonaws.com
          account-url: AWS_ECR_ACCOUNT_URL
          # リージョン
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # ECRにリポジトリがなかったら創るか？
          create-repo: true
          # Dockerfleのパス(デフォルトはカレントディレクトリのパス)
          dockerfile: ./nginx/Dockerfile
          # ECRのリポジトリ
          repo: cafe-app-nginx
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: fix/move_credential_to_env/CA-75
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          # ECSのタスク定義名
          family: 'cafe'
          # ECSのクラスター名かARNのフルパス
          cluster-name: 'cafe-cluster'
          # サービス名
          service-name: 'cafe-alb'
          container-image-name-updates: "container=nginx,tag=${CIRCLE_SHA1}"

  # Railsのデプロイ
  rails-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # ECRにリポジトリがなかったら創るか？
          create-repo: true
          dockerfile: ./Dockerfile.prod
          # ECRのリポジトリ
          repo: cafe-app
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: fix/move_credential_to_env/CA-75
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          # ECSのタスク定義名
          family: 'cafe'
          # ECSのクラスター名かARNのフルパス
          cluster-name: 'cafe-cluster'
          # サービス名
          service-name: 'cafe-alb'
          container-image-name-updates: "container=cafe-app,tag=${CIRCLE_SHA1}"
